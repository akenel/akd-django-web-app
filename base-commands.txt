# Example akd-django-web-app
# py_app_local_django:latest

python  -m venv venv
venv/scripts/activate
---
pipx run cookiecutter https://github.com/cookiecutter/cookiecutter-django.git
cd < project_slug eg. cd py_app >
---
git init
pip install -r requirements/local.txt
pip install pre-commit
pre-commit install
----
#  Running tests with pytest and coverage

### MyPy Sanity Check - Success: no issues found in 36 source files
docker compose -f docker-compose.local.yml run --rm django  mypy py_app

### Test Coverage (31 passed ???)
docker compose -f docker-compose.local.yml run --rm django  coverage run -m pytest

### Coverage Report Write HTML report to htmlcov/index.html
docker compose -f docker-compose.local.yml run --rm django coverage html

### Review and Open Coverage Browser 80%+ OK
cd htmlcov
Invoke-Item "index.html"

eg:
File	statements	missing	excluded	coverage
Total	255		35	0		86%

-----

## PRE_Commit - Run it twice to PASS all
git init
git status
git add --all

pre-commit install
pre-commit --version
pre-commit run --all-files


## Git Repo (create via Internert for HTTP URL)
git status
git add --all
pre-commit --version
pre-commit run --all-files

docker compose -f docker-compose.local.yml run --rm django  mypy py_app
docker compose -f docker-compose.local.yml run --rm django  coverage run -m pytest
docker compose -f docker-compose.local.yml run --rm django  coverage html
cd htmlcov
%Invoke-Item "index.html"
** coverage.py v7.6.10, created at 2025-02-04 15:12 +0000 | 87%


git add --all
pre-commit run --all-files
---

 git remote -v
origin  https://github.com/akenel/akd-django-web-app.git (fetch)
origin  https://github.com/akenel/akd-django-web-app.git (push)
 git checkout -b main
Switched to a new branch 'main'
pre-commit run --all-files
pre-commit run --all-files

----

git commit -m "Initial Commit - Sanity Tests OK"
---
git branch -M main
git remote add origin https://github.com/akenel/pyWeb-app.git
git checkout -b main
Switched to a new branch 'main'
git push -u origin main

git commit -m "first commit"
pip install pre-commit

or create a new repository on the command line
echo "# akd-django-web-app" >> README.md

git add README.md
git commit -m "first commit"
git branch -M main
git remote add origin https://github.com/akenel/akd-django-web-app.git
git push -u origin main

â€¦or push an existing repository from the command line
git remote add origin https://github.com/akenel/akd-django-web-app.git
git branch -M main
git push -u origin main

### Live reloading and Sass CSS compilation

Moved to [Live reloading and SASS compilation](https://cookiecutter-django.readthedocs.io/en/latest/2-local-development/developing-locally.html#using-webpack-or-gulp).

### Celery

This app comes with Celery.

To run a celery worker:

```bash
cd py_app
celery -A config.celery_app worker -l info
```

Please note: For Celery's import magic to work, it is important _where_ the celery commands are run. If you are in the same folder with _manage.py_, you should be right.

To run [periodic tasks](https://docs.celeryq.dev/en/stable/userguide/periodic-tasks.html), you'll need to start the celery beat scheduler service. You can start it as a standalone process:

```bash
cd py_app
celery -A config.celery_app beat
